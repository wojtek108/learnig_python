def passwordChecker(password):

	import re
	passwordRegex = re.compile(r'(?=.*[A-Z])(?=.*[a-z])(?=.*\d).{8,}')
	mo = passwordRegex.search(password)

	if mo:
		print('a strong password')
	else:
		print('a weak password')


print('Give me your password to check')
newPassword = input() 

passwordChecker(newPassword)



'''
https://www.reddit.com/r/learnpython/comments/ck3e27/strong_password_checker_automate_the_boring_stuff/evkhhko/

You can validate any password with a single regex if you know this one weird trick. No, for real though. 
If you understand the positive lookahead (or lookbehind), you're all set. In general, a positive look ahead will not capture anything, 
it is only used for string matching. A string will match only if the condition of the look ahead is found in the string at the location of the look ahead 
(and vice versa for the lookbehind). So for example,

regex = re.compile(r'(?=.*\d).{5}')
That regex contains the positive lookahead (the (?=.*\d) part). That regex will only match if there is 0 or more of any character followed by a digit and 
then if there are exactly 5 of any other characters (that's the .{5}) part. So that quick regex there will only match strings that contain exactly 5 characters 
where at least one of the characters is a digit. Well, so let's expand that for your case and let's walk through it step-by-step. 

Let's do the easy part. Let's match at least 8 characters:

regex = re.compile(r'.{8,}')
Nice and simple. Match a string with absolutely any character as long as there are at least 8 of them. Okay, let's use a positive lookahead to match for at least 
one uppercase letter:

regex = re.compile(r'(?=.*[A-Z]).{8,}')
Okay, now how about lowercase letters?

regex = re.compile(r'(?=.*[A-Z])(?=.*[a-z]).{8,}')
See how that works? 0 or more characters and then an uppercase letter or no match. 0 or more characters and then a lower case letter or no match. 
And the order doesn't matter, either. So let's add the digit:

regex = re.compile(r'(?=.*[A-Z])(?=.*[a-z])(?=.*\d).{8,}')
Digits are easier since we can use the \d character class. So there you go, a one-liner regex that isn't so terribly difficult to understand 
that matches passwords as complex as you require. You could increase the complexity a great deal farther, if you'd like, too.

Read more on the positive lookahead and lookbehind as well as the negative lookahead and negative lookbehind, too. They're incredibly useful tools for crafting regex.
'''
